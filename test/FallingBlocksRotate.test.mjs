
import { beforeEach, describe, test } from "vitest";
import { expect } from "chai";
import { Board } from "../src/Board.mjs";
import { Tetromino } from "../src/Tetromino.mjs";

function fallToBottom(board) {
  for (let i = 0; i < 10; i++) {
    board.tick();
  }
}

describe("Falling tetrominoes rotate", () => {
  let board;
  beforeEach(() => {
    board = new Board(10, 6);
  });

  test("Rotate left", () => {
    board.drop(Tetromino.T_SHAPE);
    board.rotateLeft();
    expect(board.toString()).to.equalShape(
      `....T.....
       ...TT.....
       ....T.....
       ..........
       ..........
       ..........`
    );
    board.rotateLeft();
    expect(board.toString()).to.equalShape(
      `..........
       ...TTT....
       ....T.....
       ..........
       ..........
       ..........`
    );
  });

  test("Rotate Right", () => {
    board.drop(Tetromino.T_SHAPE);
    board.rotateRight();
    expect(board.toString()).to.equalShape(
      `....T.....
       ....TT....
       ....T.....
       ..........
       ..........
       ..........`
    );
    board.rotateRight();
    expect(board.toString()).to.equalShape(
      `..........
       ...TTT....
       ....T.....
       ..........
       ..........
       ..........`
    );
  });

  test("Rotate Right I Shape", () => {
    board.drop(Tetromino.I_SHAPE);
    board.rotateRight();
    expect(board.toString()).to.equalShape(
      `....I.....
       ....I.....
       ....I.....
       ....I.....
       ..........
       ..........`
    );
    board.rotateRight();
    expect(board.toString()).to.equalShape(
      `..........
       ..........
       ..IIII....
       ..........
       ..........
       ..........`
    );
  });

  test("Rotate Left I Shape", () => {
    return;
    board.drop(Tetromino.I_SHAPE);
    board.move('l');
    board.move('l');
    board.move('l');
    board.move('l');
    board.move('l');
    board.move('l');
    expect(board.toString()).to.equalShape(
      `I.........
       I.........
       I.........
       I.........
       ..........
       ..........`
    );
    // board.rotateRight();
    // expect(board.toString()).to.equalShape(
    //  `I.........
    //   I.........
    //   I.........
    //   I.........
    //   ..........
    //   ..........`
    // );
    // board.rotateLeft();
    // expect(board.toString()).to.equalShape(
    //  `I.........
    //   I.........
    //   I.........
    //   I.........
    //   ..........
    //   ..........`
    // );
  });

  test("Rotate I Shape at wall", () => {
    board.drop(Tetromino.I_SHAPE2);

    board.move('r');
    board.move('r');
    board.move('r');
    board.move('r');
    board.move('r');
    expect(board.toString()).to.equalShape(
      `.........I
       .........I
       .........I
       .........I
       ..........
       ..........`
    );
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `.........I
       .........I
       .........I
       .........I
       ..........
       ..........`
    );
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `.........I
       .........I
       .........I
       .........I
       ..........
       ..........`
    );
    board.rotateLeft();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `.........I
       .........I
       .........I
       .........I
       ..........
       ..........`
    );
  });

  test("Rotate I Shape at wall left side", () => {
    board.drop(Tetromino.I_SHAPE2);
    console.log("left move");
    board.move('l');
    board.move('l');
    board.move('l');
    board.move('l');
    board.move('l');
    board.move('l');
    board.move('l');
    expect(board.toString()).to.equalShape(
     `I.........
      I.........
      I.........
      I.........
      ..........
      ..........`
    );
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
     `I.........
      I.........
      I.........
      I.........
      ..........
      ..........`
    );
    board.rotateRight();

    expect(board.toString()).to.equalShape(
     `I.........
      I.........
      I.........
      I.........
      ..........
      ..........`
    );
    board.rotateLeft();
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
     `I.........
      I.........
      I.........
      I.........
      ..........
      ..........`
    );
  });

});

